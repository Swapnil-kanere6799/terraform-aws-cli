name: eventstore/Start-Test-Instances

run-name: eventstore/Start-Test-Instances-of-${{ inputs.StackName }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      StackName:
        type: choice
        description: Stack Name of the Eventstore Cluster
        options:
          - aps3-Es-Tesseract-Test-1
          - eu1-Es-Tesseract-Test-1
          - eu1-Es-Tesseract-Test-2
          - eu1-Es-Tesseract-Test-3
          - eu1-Es-Tesseract-Test-4
          - eu1-Es-Tesseract-Test-5
          - in1-Es-Tesseract-Test-1
          - in1-Es-Tesseract-Test-2
          - in1-Es-Tesseract-Test-3
          - in1-Es-Tesseract-Test-4
          - in1-Es-Tesseract-Test-5
          - mec1-Es-Tesseract-Test-1
          - sg1-Es-Tesseract-Test-1
          - sg1-Es-Tesseract-Test-2
          - sg1-Es-Tesseract-Test-3
          - sk1-Es-Internal-Test-1
          - sk1-Es-Internal-Test-12
          - us1-Es-Test-Tesseract-1
          - us1-Es-Test-Tesseract-2
          - us1-Es-Test-Tesseract-3
          - us1-Es-Tesseract-Test-1
          - us1-Es-Tesseract-Test-2

      IssueId:
        type: string
        required: true
        description: Issue ID for this task

      InstanceCount:
        type: string
        description: Number of Instances to Start
        default: ""
        required: false

      InstanceType:
        type: string
        description: Instance Type
        default: ""
        required: false

      AmiId:
        type: string
        description: AMI ID
        default: ""
        required: false

      NbDiskSize:
        type: number
        default: 0
        description: Nb Volume

      EsDiskSize:
        type: number
        default: 0
        description: ES Volume

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  setup-job-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Generate github token
        id: generate-github-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Checkout Cloudformation repo
        uses: actions/checkout@v3
        with:
          repository: CleverTap-SNE/Cloudformation
          path: cloudformation
          token: ${{ steps.generate-github-token.outputs.token }}

      - name: Get stack prefix
        id: get-stack-prefix
        run: |
          set -euxo pipefail
          stack_prefix=$(echo "${{ inputs.StackName }}" | cut -d '-' -f1)
          echo "STACK_PREFIX=${stack_prefix}" >> $GITHUB_OUTPUT

      - name: Get stack region
        id: get-stack-region
        run: |
          set -euxo pipefail
          region=$(./scripts/utils/get_stack_region.bash ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }})
          echo "REGION=${region}" >> $GITHUB_OUTPUT

      - name: Get stack instance count
        id: get-stack-instance-count
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          instance_count=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .InstanceCount' eventstore/$stack_prefix/clusters.json)
          echo "INSTANCE_COUNT=$instance_count" >> $GITHUB_OUTPUT

      - name: Get instance type
        id: get-instance-type
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          instance_type=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .InstanceType' eventstore/$stack_prefix/clusters.json)
          echo "INSTANCE_TYPE=${instance_type}" >> $GITHUB_OUTPUT

      - name: Get ami id
        id: get-ami-id
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          ami_id=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .ImageId' eventstore/$stack_prefix/clusters.json)
          echo "AMI_ID=${ami_id}" >> $GITHUB_OUTPUT

      - name: Get nb volume Size
        id: get-nb-volume-size
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          nb_volume_size=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .XvdnEc2VolumeSize' eventstore/$stack_prefix/clusters.json)
          echo "NB_VOLUME_SIZE=${nb_volume_size}" >> $GITHUB_OUTPUT

      - name: Get es volume Size
        id: get-es-volume-size
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          es_volume_size=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .XvdpEc2VolumeSize' eventstore/$stack_prefix/clusters.json)
          echo "ES_VOLUME_SIZE=${es_volume_size}" >> $GITHUB_OUTPUT

      - name: Get status of sensu agent
        id: get-status-of-sensu-agent
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
          is_sensu_agent_enabled=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}") | .EnableSensuV3ClientEcsService' eventstore/$stack_prefix/clusters.json)
          if [ -z "$is_sensu_agent_enabled" ]; then
            is_sensu_agent_enabled=false
          fi
          echo "IS_SENSU_AGENT_ENABLED=$is_sensu_agent_enabled" >> $GITHUB_OUTPUT
          

    outputs:
      STACK_PREFIX: ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }}
      REGION: ${{ steps.get-stack-region.outputs.REGION }}
      INSTANCE_COUNT: ${{ steps.get-stack-instance-count.outputs.INSTANCE_COUNT }}
      INSTANCE_TYPE: ${{ steps.get-instance-type.outputs.INSTANCE_TYPE }}
      AMI_ID: ${{ steps.get-ami-id.outputs.AMI_ID }}
      NB_VOLUME_SIZE: ${{steps.get-nb-volume-size.outputs.NB_VOLUME_SIZE}}
      ES_VOLUME_SIZE: ${{steps.get-es-volume-size.outputs.ES_VOLUME_SIZE}}
      IS_SENSU_AGENT_ENABLED: ${{ steps.get-status-of-sensu-agent.outputs.IS_SENSU_AGENT_ENABLED }}

  pre-flight-validation:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment

    steps:
      - name: Generate github token
        id: generate-github-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout Cloudformation repo
        uses: actions/checkout@v3
        with:
          repository: CleverTap-SNE/Cloudformation
          path: cloudformation
          token: ${{ steps.generate-github-token.outputs.token }}

      - name: Validate if the volumes are false and the instances are not running
        working-directory: cloudformation
        run: |
          set -euxo pipefail
          stack_prefix=${{ needs.setup-job-environment.outputs.STACK_PREFIX }}
          stack_name=$(jq -r '.[] | select(.Name == "${{ inputs.StackName }}" and .EnableEc2Instance == false and .EnableEc2Volumes == false and .EnableNbVolume == false) | .Name' eventstore/$stack_prefix/clusters.json)
          if [[ -n $stack_name && $stack_name == ${{ inputs.StackName }} ]]; then
            echo "Volumes are false and the instances are not running for given stack"
          else
            echo "error: Either volumes are true or instances are already in running state"
            exit 1
          fi

      - name: Validate that AMI supports CPU architecture associated with instance type
        run: |
          set -euxo pipefail
          instance_type_supported_arch=$(aws ec2 describe-instance-types --instance-types "${{ inputs.InstanceType || needs.setup-job-environment.outputs.INSTANCE_TYPE }}" --region ${{ needs.setup-job-environment.outputs.REGION }} --query 'InstanceTypes[0].ProcessorInfo.SupportedArchitectures' --output text)
          ami_supported_arch=$(aws ec2 describe-images --image-ids "${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }}" --region ${{ needs.setup-job-environment.outputs.REGION }} --query 'Images[0].Architecture' --output text)
          if [[ "$instance_type_supported_arch" == *"$ami_supported_arch"* ]]; then
            echo "${{ inputs.InstanceType || needs.setup-job-environment.outputs.INSTANCE_TYPE }} is compatible with AMI ID ${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }}"
          else
            echo "${{ inputs.InstanceType || needs.setup-job-environment.outputs.INSTANCE_TYPE }} is not compatible with AMI ID ${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }}"
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Validate that AMI is CleverTap generated and based on ECS optimized AMI
        run: |
          set -euxo pipefail
          ami_name=$(aws ec2 describe-images --image-ids "${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }}" --region ${{ needs.setup-job-environment.outputs.REGION }} --query 'Images[0].Name' --output text)
          if [[ "$ami_name" == "wizrocket-amzn2-ami-ecs-hvm"* || "$ami_name" == "wizrocket-al2023-ami-ecs-hvm-2023"* ]]; then
            echo "${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }} is CleverTap generated and based on ECS optimized AMI"
          else
            echo "${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }} is not CleverTap generated and based on ECS optimized AMI"
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  execute-start-instances:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - pre-flight-validation

    steps:
      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Start instances of ${{ inputs.StackName }}
        uses: ./.github/actions/cloudformation-build-commit-and-deploy
        with:
            query: 'map(if .Name == "${{ inputs.StackName }}" then .EnableEc2Instance = true | .EnableEc2Volumes = true | .EnableNbVolume = true | .XvdnEc2VolumeSize = (if ${{ inputs.NbDiskSize }} == 0 then .XvdnEc2VolumeSize else ${{ inputs.NbDiskSize }} end) | .XvdpEc2VolumeSize = (if ${{ inputs.EsDiskSize }} == 0 then .XvdpEc2VolumeSize else ${{ inputs.EsDiskSize }} end) | .ImageId = "${{ inputs.AmiId || needs.setup-job-environment.outputs.AMI_ID }}" | .InstanceType = "${{ inputs.InstanceType || needs.setup-job-environment.outputs.INSTANCE_TYPE }}" | .InstanceCount = ${{ inputs.InstanceCount || needs.setup-job-environment.outputs.INSTANCE_COUNT }} else . end)'
            issue_id: ${{ inputs.IssueId }}
            stack_name: ${{ inputs.StackName }}
            component: 'eventstore'
            commit_message: 'eventstore: start instances of ${{ inputs.StackName }} with given attributes'
            app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
            private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}
            aws_cloudformation_service_iam_role: ${{ secrets.AWS_CLOUDFORMATION_SERVICE_IAM_ROLE }}
            aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  post-flight-validation:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - pre-flight-validation
      - execute-start-instances

    steps:
      - name: Checkout Infra-Actions repo
        id: checkout-infra-actions-repo
        uses: actions/checkout@v3

      - name: Install Python Requirements
        run: |
          set -euxo pipefail
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse

      - name: Validate that checks associated with instance are registered in Sensu
        if: needs.setup-job-environment.outputs.IS_SENSU_AGENT_ENABLED == 'true'
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          python3 ./scripts/sensu/wait_until_sensu_checks_are_green.py --stack ${{ inputs.StackName }} --subscription eventstore --instance-count ${{ needs.setup-job-environment.outputs.INSTANCE_COUNT }} --start-ip ${{ needs.setup-job-environment.outputs.START_IP }} --checks keepalive,nb-availability,realtimeexports-availability,eventstore-availability,eventstore_health_v2
        env:
          SENSU_API_KEY: ${{ secrets.SENSU_API_KEY }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_ID }}
          SENSU_CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_SECRET }}

  execute-to-create-jira-ticket:
    runs-on: ubuntu-latest
    needs:
      - setup-job-environment
      - pre-flight-validation
      - execute-start-instances
      - post-flight-validation

    steps:
      - name: Generate github token
        id: generate-github-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.CLEVERTAP_SNE_BOT_ID }}
          private_key: ${{ secrets.CLEVERTAP_SNE_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout Infra-Actions repo
        uses: actions/checkout@v3

      - name: Install Python
        run: |
          python3 -m venv prod-venv
          source prod-venv/bin/activate
          pip3 install requests argparse

      - name: Execute create-jira-ticket script
        run: |
          set -euxo pipefail
          source prod-venv/bin/activate
          python3 ./scripts/eventstore/create-jira-ticket.py --stack_name ${{ inputs.StackName }}
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
